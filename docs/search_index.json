[["index.html", "A Minimal Introduction to GIS in R 1 Overview", " A Minimal Introduction to GIS in R Jasper Slingsby 2021-05-20 1 Overview This is a minimal introduction to GIS and handling spatial data in R compiled for the Biological Sciences BSc(Honours) class at the University of Cape Town. The goal is to give you a very brief introduction to Geographic Information Systems (GIS) in general and some familiarity with handling spatial data in R. GIS is a field of research that many people dedicate their entire lives to, yet we only have a week, so this really is a minimalist introduction. I’ll focus on giving you a broad overview and some idea of how to teach yourself (using R). The 5-day module includes daily ~1 hour lectures followed by self-study time where you will have daily goals/tasks to help you incrementally develop your own project. The project will be the deliverable for the module. I will be available for set office hours every afternoon to assist you. These course notes borrow or paraphrase extensively from Adam Wilson’s GEO 511 Spatial Data Science course and Manny Gimond’s Intro to GIS &amp; Spatial Analysis. Other very valuable resources include: Lovelace et al’s online book Geocomputation with R Ryan Garnett’s cheatsheet for library(sf) This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License. This is a sample book written in Markdown. You can use anything that Pandoc’s Markdown supports, e.g., a math equation \\(a^2 + b^2 = c^2\\). The bookdown package can be installed from CRAN or Github: install.packages(&quot;bookdown&quot;) # or the development version # devtools::install_github(&quot;rstudio/bookdown&quot;) Remember each Rmd file contains one and only one chapter, and a chapter is defined by the first-level heading #. To compile this example to PDF, you need XeLaTeX. You are recommended to install TinyTeX (which includes XeLaTeX): https://yihui.name/tinytex/. "],["intro.html", "2 Why care about GIS?", " 2 Why care about GIS? How lost would you be without Google Maps? Figure 2.1: Screenshot of Google Maps for Cape Town. If we search “Geographic Information Systems OR GIS” in Web of Science, it is clear that the number of papers using GIS has exploded over time! Figure 2.2: The number of papers on Web of Science when searching Geographic Information Systems OR GIS. GIS is especially important in environment and life sciences! Figure 2.3: The number of papers on Web of Science by theme when searching Geographic Information Systems OR GIS. We use it for things like mapping ecosystems and biomes. Figure 2.4: The historical extent of the biomes of South Africa. Or the loss of ecosystems and biomes. Figure 2.5: The remaining extent of the biomes of South Africa. Although the outcomes of GIS analyses are not always maps, e.g. this table from Skowno et al. (2021). But it can also be interactive! Figure 2.6: The Global Forest Watch app. You can label chapter and section titles using {#label} after them, e.g., we can reference Chapter 2. If you do not manually label them, there will be automatic labels anyway, e.g., Chapter ??. Figures and tables with captions will be placed in figure and table environments, respectively. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Figure 2.7: Here is a nice figure! Reference a figure by its code chunk label with the fig: prefix, e.g., see Figure 2.7. Similarly, you can reference tables generated from knitr::kable(), e.g., see Table 2.1. knitr::kable( head(iris, 20), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 2.1: Here is a nice table! Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa 4.6 3.4 1.4 0.3 setosa 5.0 3.4 1.5 0.2 setosa 4.4 2.9 1.4 0.2 setosa 4.9 3.1 1.5 0.1 setosa 5.4 3.7 1.5 0.2 setosa 4.8 3.4 1.6 0.2 setosa 4.8 3.0 1.4 0.1 setosa 4.3 3.0 1.1 0.1 setosa 5.8 4.0 1.2 0.2 setosa 5.7 4.4 1.5 0.4 setosa 5.4 3.9 1.3 0.4 setosa 5.1 3.5 1.4 0.3 setosa 5.7 3.8 1.7 0.3 setosa 5.1 3.8 1.5 0.3 setosa You can write citations, too. For example, we are using the bookdown package (Xie 2020) in this sample book, which was built on top of R Markdown and knitr (Xie 2015). "],["gis-basics.html", "3 GIS basics 3.1 What is GIS? 3.2 How do we do GIS? 3.3 How to get help?", " 3 GIS basics Here we cover the basics of GIS… 3.1 What is GIS? A Geographic Information System is a framework used to create, manage, visualize and analyze data in a spatial context. Most datasets can be assigned a spatial location, either on the earth’s surface or within some constrained area like a sports field, a vegetation survey plot, or even a drawer in your kitchen. While almost any dataset has a spatial context, and can thus be represented in a GIS, the real question is whether it needs to be analyzed in a GIS environment? The answer to this question depends on the purpose of the analysis. Typically, one would use GIS if you were using the spatial information associated with the data to: access data elements (e.g. select data by spatial location or coverage), perform analytical operations (e.g. overlay and merge two datasets to produce a new dataset), or render visualizations (e.g. generate a map). There are many many operations and functions within each of these three major operation types. There are also many support functions and operations that are common across the operation types (e.g. reading/writing data objects). We’ll delve into these later. 3.2 How do we do GIS? There are a large number of software packages for doing GIS. Some are free, while others require you to pay for a license. They also vary in what they do (or the combination of things they do). For example, some of the best known desktop GIS applications, which is what your average GIS user is interested in, include: ArcGIS - a commercial product that works on Windows only (or online). UCT has a site license, which provides a set number of user licenses for UCT postgrads and staff (see section 3.3 for details). Note that ArcGIS is an ESRI product and comes with (or can be upgraded to include) a suite of other (commercial) software components in addition to the desktop application QGIS - free and open source software (FOSS) for Windows, Mac or Linux Google Earth - free (for now), but not open source, for Windows, Mac, Linux, or online Desktop GIS applications are typically graphical user interfaces (GUIs) that call on various other geospatial libraries to do the actual data processing (think of these as sets of functions or tools). Some examples of FOSS geospatial libraries are GDAL and GEOS, which are designed to deal with different data models and/or file types. We can also do GIS by calling the geospatial libraries and other GIS software types directly with various programming languages. While we can use many (or just about any) coding language, there are a few for which the functions and syntax are better developed for the user, including: R Python JavaScript A major advantage of using these general purpose programming languages for your GIS work is that it allows you take advantage of their functions for statistical analyses and presentation etc all in one environment and/or work flow. This also makes it much easier to make your research reproducible. Note that the geospatial libraries and the other GIS softwares that we call are coded in a variety of other languages, such as Java, C/C++, C# or SQL, but these languages are typically less user friendly and/or more difficult to learn. Other “GIS software types” include: spatial databases such as PostGIS, which is free and open source software (FOSS) for Windows, Mac or Linux and great for storing and querying large and complex datasets web mapping such as MapServer or GeoServer 3.3 How to get help? UCT has a GIS Support Unit to assist UCT staff and postgraduate researchers with their GIS and spatial data needs. Their primary goal is to help users develop their GIS skills in order to perform sound data capture, geospatial analysis and map production. They can help you with: Troubleshooting, Project Planning, Analysis, Cartographic Design and Data Handling. GIS Training Applying for an ESRI (ArcMAP) Software license. Note that they predominantly work with ESRI and QGIS and don’t provide support for R, etc. That said, many GIS work flow issues are common across platforms, and the support unit really know what they’re doing. They’re also a good source of data if you’re struggling to find what you need, but please do your homework before asking them for data! Lastly… I am not a help desk!!! The goal for this module is to teach you how to help yourself. I’m available to help in the afternoon office hours during this module, but unfortunately, while I would love to, I do not have the time to help you all with your GIS or R issues for the rest of your careers… You can find the answer to any issue you are encountering in an online forum like GIS Stack Exchange. I typically just type my questions (or copy and past error messages) directly into Google. The trick is working out what to ask, and sometimes you need to reword your question a couple of times to find the answer you need. If you’re really getting nowhere, you can even post your question on a forum, although it is unlikely that you’ll ever need to do this… "],["gis-data-models-and-file-formats.html", "4 GIS data models and file formats 4.1 Data models 4.2 Attribute data 4.3 File formats", " 4 GIS data models and file formats 4.1 Data models GIS data typically come in two data model types vector or raster. 4.1.1 Vector data The three basic vector data types are points, lines (also sometimes referred to as polylines or linestrings) and polygons. While they are treated as different data types, you can also consider them to be a nested hierarchy. For example, to make a line you need two or more points, while a polygon requires three or more lines. Figure 4.1: The hierarchical construction of vector data types. From this we can observe the different properties of the data types: a point is a location in space defined by a set of coordinates based on a coordinate reference system (more about these later) a line is two or more points with straight lines connecting them, where each line has a length a polygon is a set of points connected by lines that form a closed shape, which has an area Note that these “data types” are also commonly called geometric primitives or geometries. Later we’ll see that you get more complicated “types,” but these are generally combinations of the above: multipoint, multilinestring, multipolygon, geometry collection, etc and are largely just different data classes designed to help with handling data than unique geometries. 4.1.2 Raster data Raster data are essentially data stored in a regular grid of pixels (or cells). The value of each pixel is a number representing a measured value (e.g. continuous data such as sea surface temperature) or a category (e.g. discrete data such as land cover class). All pixels have a value, even if the value is “No Data.” Rasters are particularly useful for representing continuous data. Discrete data are often better presented as vector polygons. For example: Figure 4.2: Vector (polygon) representation of discrete data; the vegetation types of the Cape Peninsula. Vector data models are typically good at representing categorical data, especially where they may have complex boundaries. You just have to choose a good colour palette… Figure 4.3: Raster representation of continuous data; a digital elevation model of the Cape Peninsula. Rasters are great for continuous data. If this was a vector plot, each pixel would have to be its own polygon and the legend would have a separate entry for each unique value - &gt;60 000 entries!!! That said, you can represent continuous values with a vector data model quite effectively if you bin the continuous data into classes, such as one can do with a filled contour plot, e.g. Figure 4.4: Vector representation of continuous data; a filled contour plot of a digital elevation model of the Cape Peninsula using 100m contours. In truth, I generated this plot from a raster data object (the digital elevation model), but to plot it R had to convert the raster to a set of vector polygons first. You’ll find that you often need to convert data between vector and raster models for various reasons, and we’ll cover that later. Figure 4.5: Raster representation the discrete data; the vegetation types of the Cape Peninsula. Rasters are usually not that good at representing categorical data. Note that most raster file formats (and GIS software) can only store numeric data, so this plot misleadingly represents the vegetation types as continuous data. You can label and represent categorical data in rasters in R, but this is usually more effort than its worth and is almost always less effective than using a vector format… A common exception is land use and land cover (LULC) maps, where remotely sensed satellite imagery (raster data) are classified into predefined classes (e.g. agriculture, rock, grassland, etc) based on various criteria or algorithms. Even then, these are best visualized as interactive rather than static maps so you can make sense of them by zooming in and panning around. 4.2 Attribute data 4.3 File formats Somewhat linked to data models, and as I mentioned before, there is a huge variety of file formats. These have proliferated as different software packages have developed their own set of “native” formats. Many of these are not open source. You can view the list of most of the file types supported by R (or at least the types supported by library(rgdal)) by running the code rgdal::ogrDrivers(), which gives this output: ## rgdal: version: 1.5-19, (SVN revision 1092) ## Geospatial Data Abstraction Library extensions to R successfully loaded ## Loaded GDAL runtime: GDAL 2.2.3, released 2017/11/20 ## Path to GDAL shared files: /usr/share/gdal/2.2 ## GDAL binary built with GEOS: TRUE ## Loaded PROJ runtime: Rel. 4.9.3, 15 August 2016, [PJ_VERSION: 493] ## Path to PROJ shared files: (autodetected) ## Linking to sp version:1.4-4 name long_name write copy isVector AeronavFAA Aeronav FAA FALSE FALSE TRUE AmigoCloud AmigoCloud TRUE FALSE TRUE ARCGEN Arc/Info Generate FALSE FALSE TRUE AVCBin Arc/Info Binary Coverage FALSE FALSE TRUE AVCE00 Arc/Info E00 (ASCII) Coverage FALSE FALSE TRUE BNA Atlas BNA TRUE FALSE TRUE CAD AutoCAD Driver FALSE FALSE TRUE Carto Carto TRUE FALSE TRUE Cloudant Cloudant / CouchDB TRUE FALSE TRUE CouchDB CouchDB / GeoCouch TRUE FALSE TRUE CSV Comma Separated Value (.csv) TRUE FALSE TRUE CSW OGC CSW (Catalog Service for the Web) FALSE FALSE TRUE DGN Microstation DGN TRUE FALSE TRUE DXF AutoCAD DXF TRUE FALSE TRUE EDIGEO French EDIGEO exchange format FALSE FALSE TRUE ElasticSearch Elastic Search TRUE FALSE TRUE ESRI Shapefile ESRI Shapefile TRUE FALSE TRUE Geoconcept Geoconcept TRUE FALSE TRUE GeoJSON GeoJSON TRUE FALSE TRUE Geomedia Geomedia .mdb FALSE FALSE TRUE GeoRSS GeoRSS TRUE FALSE TRUE GFT Google Fusion Tables TRUE FALSE TRUE GML Geography Markup Language (GML) TRUE FALSE TRUE GMLAS Geography Markup Language (GML) driven by application schemas FALSE TRUE TRUE GPKG GeoPackage TRUE TRUE TRUE GPSBabel GPSBabel TRUE FALSE TRUE GPSTrackMaker GPSTrackMaker TRUE FALSE TRUE GPX GPX TRUE FALSE TRUE HTF Hydrographic Transfer Vector FALSE FALSE TRUE HTTP HTTP Fetching Wrapper FALSE FALSE TRUE Idrisi Idrisi Vector (.vct) FALSE FALSE TRUE Interlis 1 Interlis 1 TRUE FALSE TRUE Interlis 2 Interlis 2 TRUE FALSE TRUE JML OpenJUMP JML TRUE FALSE TRUE JP2OpenJPEG JPEG-2000 driver based on OpenJPEG library FALSE TRUE TRUE KML Keyhole Markup Language (KML) TRUE FALSE TRUE LIBKML Keyhole Markup Language (LIBKML) TRUE FALSE TRUE MapInfo File MapInfo File TRUE FALSE TRUE Memory Memory TRUE FALSE TRUE MSSQLSpatial Microsoft SQL Server Spatial Database TRUE FALSE TRUE MySQL MySQL TRUE FALSE TRUE NAS NAS - ALKIS FALSE FALSE TRUE netCDF Network Common Data Format TRUE TRUE TRUE ODBC ODBC TRUE FALSE TRUE ODS Open Document/ LibreOffice / OpenOffice Spreadsheet TRUE FALSE TRUE OGR_DODS OGR_DODS FALSE FALSE TRUE OGR_GMT GMT ASCII Vectors (.gmt) TRUE FALSE TRUE OGR_OGDI OGDI Vectors (VPF, VMAP, DCW) FALSE FALSE TRUE OGR_PDS Planetary Data Systems TABLE FALSE FALSE TRUE OGR_SDTS SDTS FALSE FALSE TRUE OGR_VRT VRT - Virtual Datasource FALSE FALSE TRUE OpenAir OpenAir FALSE FALSE TRUE OpenFileGDB ESRI FileGDB FALSE FALSE TRUE OSM OpenStreetMap XML and PBF FALSE FALSE TRUE PCIDSK PCIDSK Database File TRUE FALSE TRUE PDF Geospatial PDF TRUE TRUE TRUE PGDUMP PostgreSQL SQL dump TRUE FALSE TRUE PGeo ESRI Personal GeoDatabase FALSE FALSE TRUE PLSCENES Planet Labs Scenes API FALSE FALSE TRUE PostgreSQL PostgreSQL/PostGIS TRUE FALSE TRUE REC EPIInfo .REC FALSE FALSE TRUE S57 IHO S-57 (ENC) TRUE FALSE TRUE SEGUKOOA SEG-P1 / UKOOA P1/90 FALSE FALSE TRUE SEGY SEG-Y FALSE FALSE TRUE Selafin Selafin TRUE FALSE TRUE SOSI Norwegian SOSI Standard FALSE FALSE TRUE SQLite SQLite / Spatialite TRUE FALSE TRUE SUA Tim Newport-Peace’s Special Use Airspace Format FALSE FALSE TRUE SVG Scalable Vector Graphics FALSE FALSE TRUE SXF Storage and eXchange Format FALSE FALSE TRUE TIGER U.S. Census TIGER/Line TRUE FALSE TRUE UK .NTF UK .NTF FALSE FALSE TRUE VDV VDV-451/VDV-452/INTREST Data Format TRUE FALSE TRUE VFK Czech Cadastral Exchange Data Format FALSE FALSE TRUE Walk Walk FALSE FALSE TRUE WAsP WAsP .map format TRUE FALSE TRUE WFS OGC WFS (Web Feature Service) FALSE FALSE TRUE XLS MS Excel format FALSE FALSE TRUE XLSX MS Office Open XML spreadsheet TRUE FALSE TRUE XPlane X-Plane/Flightgear aeronautical data FALSE FALSE TRUE Note that there has been a big push to develop a standardized set of open source, efficient and interoperable file formats. "],["some-important-concepts.html", "5 Some important concepts 5.1 Scale 5.2 Coordinate Reference Systems (CRS) 5.3 Attributes", " 5 Some important concepts 5.1 Scale 5.2 Coordinate Reference Systems (CRS) 5.3 Attributes "],["final-words.html", "6 Final Words", " 6 Final Words We have finished a nice book. "],["references.html", "References", " References Skowno, Andrew L, Debbie Jewitt, and Jasper A Slingsby. 2021. “Rates and patterns of habitat loss across South Africa’s vegetation biomes.” South African Journal of Science 117 (1/2). https://doi.org/10.17159/sajs.2021/8182. Xie, Yihui. 2015. Dynamic Documents with R and Knitr. 2nd ed. Boca Raton, Florida: Chapman; Hall/CRC. http://yihui.name/knitr/. ———. 2020. Bookdown: Authoring Books and Technical Documents with r Markdown. https://github.com/rstudio/bookdown. "]]
