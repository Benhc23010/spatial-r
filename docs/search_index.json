[["rdemo.html", "7 Vector GIS operations in R 7.1 Case study and demo datasets 7.2 Reading and writing 7.3 Basic plotting 7.4 Cropping 7.5 Select and subset by attribute 7.6 Combine classes and dissolve by attribute 7.7 Calling iNaturalist locality (point) data from R 7.8 Converting a dataframe into a spatial object 7.9 Adding basemaps to plots 7.10 Interactive maps with leaflet 7.11 Reprojecting 7.12 Intersecting points and polygons 7.13 Colour or label points 7.14 Buffering 7.15 Within distance and intersect", " 7 Vector GIS operations in R 7.1 Case study and demo datasets Ok, for demonstrating some of the many GIS operations R can perform we will be using data from one of my favourite study areas, the Cape Peninsula. The datasets we will use, some of their properties and where to source them are tabled below: Name Data source Data model Geometry type File format Localities iNaturalist Vector Point Watercourses City of Cape Town Vector Line ESRI shapefile Vegetation Types (historical) City of Cape Town Vector Polygon ESRI shapefile Vegetation Types (remnants) City of Cape Town Vector Polygon ESRI shapefile Elevation City of Cape Town Raster Raster GeoTIFF If you’d like to follow along and run the analyses that follow, please follow the links and download the datasets. If you don’t see the links, you need to reduce the font size by clicking the “A” in the taskbar. The elevation dataset is ~13MB as a .zip file, but will expand to ~130MB . I’ll also put a copy of all datasets on the Vula site for the course, which I understand is zero-data rated. There’s no need to download the iNaturalist data as we’ll download it directly from R. For installing R and the required packages see section 1.2. 7.2 Reading and writing sf has a one-size-fits-all approach in that most functions can be applied to most different data types (point, line, polygon, etc) or, in the case of reading and writing, file formats. To read data the function you want is st_read(). You’ll note that most of the sf functions begin with “st_” - this stands for “spatial and temporal” and is the same in some other GIS like PostGIS. Let’s try to read in some data with st_read(): NOTE: if you’re trying any of the read/write code at home, you’ll need to set the file path to where you put the data and want the outputs on your local machine. You can also use ?setwd to simplify this. If you are on Windows, make sure to change the backslashes “\" to either double backslashes or forward slashes”/“. library(sf) veg &lt;- st_read(&quot;data/cape_peninsula/veg/Vegetation_Indigenous.shp&quot;) ## Reading layer `Vegetation_Indigenous&#39; from data source ## `/home/jasper/GIT/spatial-r/data/cape_peninsula/veg/Vegetation_Indigenous.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 1325 features and 5 fields ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: -63972.95 ymin: -3803535 xmax: 430.8125 ymax: -3705149 ## Projected CRS: WGS_1984_Transverse_Mercator This has successfully read in the data and given us a summary of some of its properties. Note the projection (proj4string). This is Transverse Mercator Lo19 (i.e. centred on the 19 degree line of longitude), which has a unit in metres (see the bounding box coordinates). It’s a good projection for most calculations at this scale (and on this line of longitude*). *If you’re using Transverse Mercator, always make sure it is set for your closest “odd” line of longitude (i.e. Lo19, Lo21, Lo23)! Let’s have a closer look at the data: class(veg) ## [1] &quot;sf&quot; &quot;data.frame&quot; It is an object of two different “classes,” a data.frame, which is an R object class you should be familiar with, and class sf, which is the native class for the sf library. The nice thing about being both classes is it means you can apply the functions built for either class, e.g. head(veg) ## Simple feature collection with 6 features and 5 fields ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: -51324.95 ymin: -3732075 xmax: -35653.98 ymax: -3718136 ## Projected CRS: WGS_1984_Transverse_Mercator ## AREA_HCTR PRMT_MTR National_ Subtype ## 1 1807.5183616 24763.8073 Atlantis Sand Fynbos on marine-derived acid sands ## 2 2.1437754 609.5892 Atlantis Sand Fynbos on marine-derived acid sands ## 3 0.2134855 185.5566 Atlantis Sand Fynbos on marine-derived acid sands ## 4 2.8602421 652.1671 Atlantis Sand Fynbos on marine-derived acid sands ## 5 0.5468058 336.8006 Atlantis Sand Fynbos on marine-derived acid sands ## 6 0.4172046 259.7772 Atlantis Sand Fynbos on marine-derived acid sands ## Community geometry ## 1 Need to Find Out POLYGON ((-48203.88 -372294... ## 2 Need to Find Out POLYGON ((-36676.72 -371974... ## 3 Need to Find Out POLYGON ((-35891.46 -371837... ## 4 Need to Find Out POLYGON ((-35750.07 -371847... ## 5 Need to Find Out POLYGON ((-35823.89 -371817... ## 6 Need to Find Out POLYGON ((-35929.18 -371824... This is a commonly used function for looking at the first few rows of a dataframe. Note there are 5 attribute columns and a 6th geometry column. All sf objects have a geometry column. This is where it stores the geometry - i.e. the point, line, polygon etc - associated with each row of attribute data. To write data with sf you use st_write(), like so: st_write(veg, &quot;data/cape_peninsula/veg/Vegetation_Indigenous_duplicate.shp&quot;) ## Writing layer `Vegetation_Indigenous_duplicate&#39; to data source ## `data/cape_peninsula/veg/Vegetation_Indigenous_duplicate.shp&#39; using driver `ESRI Shapefile&#39; ## Writing 1325 features with 5 fields and geometry type Polygon. file.exists(&quot;data/cape_peninsula/veg/Vegetation_Indigenous_duplicate.shp&quot;) # Just to confirm for you that the file exists ## [1] TRUE Note that the function recognised that I wanted to write out an ESRI shapefile from the .shp file extension I provided. You can set the file type using the driver = setting in st_write(). Try st_drivers() for the list of file types supported. 7.3 Basic plotting As with other data types in R (and perhaps even more so with spatial data), you can really go to town with plotting. I’m only going to show you enough to be able to interrogate your data. Making it look pretty is a week-long course or more in its own right. Check out the “Making maps with R” chapter in Lovelace et al’s online book Geocomputation with R for a good start. The easiest way to plot datasets in R is often a bad thing to do when working with spatial datasets! plot(veg) Fortunately, in this case the dataset isn’t too big, but often you’ll either be overwhelmed with plots or your computer will crash… Why 5 plots and not one? This is because sf wants to plot the properties of each attribute in the attribute table. Fortunately, there were only 5, but there could have been hundreds! You can select the one you want with indexing like so: plot(veg[3]) These are the National Vegetation Types for the City of Cape Town municipality. You’ll note that we’re using the base R graphics functions. I mentioned before that sf integrates well with the Tidyverse, so this could also be plotted like so: library(tidyverse) #calls ggplot2 and other Tidyverse packages together ggplot() + geom_sf(data=veg, aes(fill = `National_`)) That’s better for the legend, but now we’ve squashed the map. Let’s narrow in on the Cape Peninsula for convenience. 7.4 Cropping Here we’ll apply the function st_crop(). To use the function you need an object to crop, and an extent or bounding box to crop to. sf is clever, and you can set the extent by giving it another object who’s extent you’d like to match (check the bounding box given when we read in the data earlier). We don’t have a second object in this case, so we have to provide a “numeric vector with named elements xmin, ymin, xmax and ymax,” like so: #Make a vector of coordinates in metres according to TM Lo19 ext &lt;- c(-66642.18, -3809853.29, -44412.18, -3750723.29) ext ## [1] -66642.18 -3809853.29 -44412.18 -3750723.29 #Give the vector names names(ext) &lt;- c(&quot;xmin&quot;, &quot;ymin&quot;, &quot;xmax&quot;, &quot;ymax&quot;) ext ## xmin ymin xmax ymax ## -66642.18 -3809853.29 -44412.18 -3750723.29 Now we can feed that into st_crop veg &lt;- st_crop(veg, ext) #Note that I&#39;m overwriting the old data object ## Warning: attribute variables are assumed to be spatially constant throughout all ## geometries ggplot() + geom_sf(data=veg, aes(fill = `National_`)) Better? But what about the silly splits like Peninsula Granite Fynbos - North/South and Cape Flats Dune Strandveld - West Coast/False Bay. Which ones do I mean? 7.5 Select and subset by attribute Let’s select them from the attribute table and plot them. #Make a vector of the veg types we want split_veg &lt;- c(&quot;Peninsula Granite Fynbos - North&quot;, &quot;Peninsula Granite Fynbos - South&quot;, &quot;Cape Flats Dune Strandveld - West Coast&quot;, &quot;Cape Flats Dune Strandveld - False Bay&quot;) #Use base R indexing to select attributes vegsub &lt;- veg[which(veg$National_ %in% split_veg),] #Plot ggplot() + geom_sf(data=vegsub, aes(fill = `National_`)) Or tidyverse… #Using tidyverse piping to filter and plot veg %&gt;% filter(National_ %in% split_veg) %&gt;% ggplot() + geom_sf(aes(fill = `National_`)) #The advantage being that you don&#39;t have to make the intermediate &quot;vegsub&quot; object Ok. What if we decided we don’t want them split? 7.6 Combine classes and dissolve by attribute We can just rename them in appropriate column in the attribute table… vegsub$National_ &lt;- str_replace_all(vegsub$National_, c(&quot;Peninsula Granite Fynbos - North&quot; = &quot;Peninsula Granite Fynbos&quot;, &quot;Peninsula Granite Fynbos - South&quot; = &quot;Peninsula Granite Fynbos&quot;, &quot;Cape Flats Dune Strandveld - West Coast&quot; = &quot;Cape Flats Dune Strandveld&quot;, &quot;Cape Flats Dune Strandveld - False Bay&quot; = &quot;Cape Flats Dune Strandveld&quot;)) ggplot() + geom_sf(data=vegsub, aes(fill = `National_`)) Nice, but from the polygon boundaries we see that there are a number of adjacent polygons (i.e. they have shared boundaries) that are of the same veg type. We can “dissolve” and plot these boundaries like so: vegsub %&gt;% group_by(National_) %&gt;% summarize() %&gt;% ggplot() + geom_sf(aes(fill = National_)) Ok… I think we’ve flogged that horse as far as it’ll go for now. Let’s bring in another dataset. How about points? 7.7 Calling iNaturalist locality (point) data from R A very cool feature of iNaturalist is that the team at rOpenSci have built a great R package for interfacing with it directly, called rinat! Let’s get all the records we can for the King Protea (Protea cynaroides). library(rinat) #Call the data directly from iNat pc &lt;- get_inat_obs(taxon_name = &quot;Protea cynaroides&quot;, bounds = c(-35, 18, -33.5, 18.5), maxresults = 1000) #Filter returned observations by a range of attribute criteria pc &lt;- pc %&gt;% filter(positional_accuracy&lt;46 &amp; latitude&lt;0 &amp; !is.na(latitude) &amp; captive_cultivated == &quot;false&quot; &amp; quality_grade == &quot;research&quot;) class(pc) ## [1] &quot;data.frame&quot; Ok, so this is a dataframe with lat/long data, but it isn’t registered as an object with spatial attributes (i.e. geometries). 7.8 Converting a dataframe into a spatial object To make it an object of class(sf) we use the function st_as_sf(). #Make the dataframe a spatial object of class = &quot;sf&quot; pc &lt;- st_as_sf(pc, coords = c(&quot;longitude&quot;, &quot;latitude&quot;), crs = 4326) #Note that I had to define the CRS (as Geographic WGS84)!!! #What class is it? class(pc) ## [1] &quot;sf&quot; &quot;data.frame&quot; #Note the new &quot;geometry&quot; column names(pc) ## [1] &quot;scientific_name&quot; &quot;datetime&quot; ## [3] &quot;description&quot; &quot;place_guess&quot; ## [5] &quot;tag_list&quot; &quot;common_name&quot; ## [7] &quot;url&quot; &quot;image_url&quot; ## [9] &quot;user_login&quot; &quot;id&quot; ## [11] &quot;species_guess&quot; &quot;iconic_taxon_name&quot; ## [13] &quot;taxon_id&quot; &quot;num_identification_agreements&quot; ## [15] &quot;num_identification_disagreements&quot; &quot;observed_on_string&quot; ## [17] &quot;observed_on&quot; &quot;time_observed_at&quot; ## [19] &quot;time_zone&quot; &quot;positional_accuracy&quot; ## [21] &quot;public_positional_accuracy&quot; &quot;geoprivacy&quot; ## [23] &quot;taxon_geoprivacy&quot; &quot;coordinates_obscured&quot; ## [25] &quot;positioning_method&quot; &quot;positioning_device&quot; ## [27] &quot;user_id&quot; &quot;created_at&quot; ## [29] &quot;updated_at&quot; &quot;quality_grade&quot; ## [31] &quot;license&quot; &quot;sound_url&quot; ## [33] &quot;oauth_application_id&quot; &quot;captive_cultivated&quot; ## [35] &quot;geometry&quot; #Plot ggplot() + geom_sf(data=pc) Great! We got lots of points, but without a base layer its very difficult to tell where exactly these are? 7.9 Adding basemaps to plots There are lots of ways to make the basemap from data objects etc that we can plot our points over, but an easy way is to pull in tiles from Open Street Maps and plot our points on those. library(rosm) library(ggspatial) ggplot() + annotation_map_tile(type = &quot;osm&quot;, progress = &quot;none&quot;) + geom_sf(data=pc) Note that there are quite a few base layer/tile options that can be set with type = \"\". Try rosm::osm.types() to see them all. This is better than nothing, but the scale of the map is too small to really see where the plants actually are. It would be much easier if we could look at the data interactively? 7.10 Interactive maps with leaflet We can generate interactive maps by calling the leaflet mapserver using wrapper functions in the leaflet R package written for this purpose. NOTE: If you can’t get leaflet to work it is probably a CRS problem. Your data need to be in Geographic or Web Mercator library(leaflet) library(htmltools) leaflet() %&gt;% # Add default OpenStreetMap map tiles addTiles(group = &quot;Default&quot;) %&gt;% # Add our points addCircleMarkers(data = pc, group = &quot;Protea cynaroides&quot;, radius = 3, color = &quot;green&quot;) Much better! Strange, but even though we filtered our iNaturalist records for captive_cultivated == \"false\" we still have a number of observations that appear to be in people’s gardens. Let this serve as a warning to be wary of all data! Always do “common-sense-checks” on your data and the outputs of your analyses!!! 7.11 Reprojecting One way to drastically reduce the number of cultivated records is to overlay the localities (points) with the remaining extent of the vegetation types (i.e. anything that is not in natural vegtation is likely to be cultivated). Let’s try that… #Get the remnants layer vegr &lt;- st_read(&quot;data/cape_peninsula/veg/Vegetation_Indigenous_Remnants.shp&quot;) ## Reading layer `Vegetation_Indigenous_Remnants&#39; from data source ## `/home/jasper/GIT/spatial-r/data/cape_peninsula/veg/Vegetation_Indigenous_Remnants.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 3428 features and 7 fields ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: -63951.23 ymin: -3803532 xmax: 420.7595 ymax: -3705506 ## Projected CRS: WGS_1984_Transverse_Mercator hmm &lt;- st_intersection(pc, vegr) ## Error in geos_op2_geom(&quot;intersection&quot;, x, y, ...): st_crs(x) == st_crs(y) is not TRUE Oops! The Coordinate Reference Systems are different! We will need to reproject one of the two datasets… Let’s see what CRS are currently set: st_crs(pc) ## Coordinate Reference System: ## User input: EPSG:4326 ## wkt: ## GEOGCRS[&quot;WGS 84&quot;, ## ENSEMBLE[&quot;World Geodetic System 1984 ensemble&quot;, ## MEMBER[&quot;World Geodetic System 1984 (Transit)&quot;], ## MEMBER[&quot;World Geodetic System 1984 (G730)&quot;], ## MEMBER[&quot;World Geodetic System 1984 (G873)&quot;], ## MEMBER[&quot;World Geodetic System 1984 (G1150)&quot;], ## MEMBER[&quot;World Geodetic System 1984 (G1674)&quot;], ## MEMBER[&quot;World Geodetic System 1984 (G1762)&quot;], ## MEMBER[&quot;World Geodetic System 1984 (G2139)&quot;], ## ELLIPSOID[&quot;WGS 84&quot;,6378137,298.257223563, ## LENGTHUNIT[&quot;metre&quot;,1]], ## ENSEMBLEACCURACY[2.0]], ## PRIMEM[&quot;Greenwich&quot;,0, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], ## CS[ellipsoidal,2], ## AXIS[&quot;geodetic latitude (Lat)&quot;,north, ## ORDER[1], ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], ## AXIS[&quot;geodetic longitude (Lon)&quot;,east, ## ORDER[2], ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], ## USAGE[ ## SCOPE[&quot;Horizontal component of 3D system.&quot;], ## AREA[&quot;World.&quot;], ## BBOX[-90,-180,90,180]], ## ID[&quot;EPSG&quot;,4326]] So the points are Geographic. Besides having set it ourselves earlier, we know this because it indicates that the unit is degrees. st_crs(vegr) ## Coordinate Reference System: ## User input: WGS_1984_Transverse_Mercator ## wkt: ## PROJCRS[&quot;WGS_1984_Transverse_Mercator&quot;, ## BASEGEOGCRS[&quot;WGS 84&quot;, ## DATUM[&quot;Hartebeesthoek94&quot;, ## ELLIPSOID[&quot;WGS 84&quot;,6378137,298.257223563, ## LENGTHUNIT[&quot;metre&quot;,1]], ## ID[&quot;EPSG&quot;,6148]], ## PRIMEM[&quot;Greenwich&quot;,0, ## ANGLEUNIT[&quot;Degree&quot;,0.0174532925199433]]], ## CONVERSION[&quot;unnamed&quot;, ## METHOD[&quot;Transverse Mercator&quot;, ## ID[&quot;EPSG&quot;,9807]], ## PARAMETER[&quot;Latitude of natural origin&quot;,0, ## ANGLEUNIT[&quot;Degree&quot;,0.0174532925199433], ## ID[&quot;EPSG&quot;,8801]], ## PARAMETER[&quot;Longitude of natural origin&quot;,19, ## ANGLEUNIT[&quot;Degree&quot;,0.0174532925199433], ## ID[&quot;EPSG&quot;,8802]], ## PARAMETER[&quot;Scale factor at natural origin&quot;,1, ## SCALEUNIT[&quot;unity&quot;,1], ## ID[&quot;EPSG&quot;,8805]], ## PARAMETER[&quot;False easting&quot;,0, ## LENGTHUNIT[&quot;metre&quot;,1], ## ID[&quot;EPSG&quot;,8806]], ## PARAMETER[&quot;False northing&quot;,0, ## LENGTHUNIT[&quot;metre&quot;,1], ## ID[&quot;EPSG&quot;,8807]]], ## CS[Cartesian,2], ## AXIS[&quot;(E)&quot;,east, ## ORDER[1], ## LENGTHUNIT[&quot;metre&quot;,1, ## ID[&quot;EPSG&quot;,9001]]], ## AXIS[&quot;(N)&quot;,north, ## ORDER[2], ## LENGTHUNIT[&quot;metre&quot;,1, ## ID[&quot;EPSG&quot;,9001]]]] The vegetation types are in Transverse Mercator Lo19, because it says “Transverse Mercator” and the “Central_Meridian” is set to 19. In this case, either CRS is fine for our purposes, but let’s stick with Transverse Mercator Lo19, because it’ll be useful later. For this we need to reproject the veg layer like so: pc &lt;- st_transform(pc, st_crs(vegr)) Note that I fed it the CRS from vegr. This guarantees that they’ll be the same, even if we misidentified what the actual CRS is… 7.12 Intersecting points and polygons …and now we can try to intersect the points and polygons again… First lets see how many rows and columns the point data before the intersection: #call the dimensions of pc dim(pc) ## [1] 638 35 And after the intersection? pc &lt;- st_intersection(pc, vegr) ## Warning: attribute variables are assumed to be spatially constant throughout all ## geometries dim(pc) ## [1] 610 42 Less rows, but more columns! Two things have happened: The attribute data from the polygons in vegr intersected by the points in pc have been added to the attribute table in pc! All points that do not intersect the polygons in vegr were dropped (i.e. those that were recorded outside the remaining extent of natural vegetation). Let’s have a look ggplot() + annotation_map_tile(type = &quot;osm&quot;, progress = &quot;none&quot;) + geom_sf(data=pc) Yup, the localities in suburbia are gone… The map is a bit bland though. How about we use our “new information” about which vegetation types the observations occur in to colour or label the points on the map? 7.13 Colour or label points First, let’s add colour: library(wesanderson) pal &lt;- wes_palette(&quot;Darjeeling1&quot;, 7, type = &quot;continuous&quot;) ggplot() + annotation_map_tile(type = &quot;osm&quot;, progress = &quot;none&quot;) + geom_sf(data=pc, aes(col = National_)) + scale_colour_manual(values = pal) Looks like almost all of them are in Peninsula Sandstone Fynbos… pc %&gt;% group_by(National_) %&gt;% summarise(n()) ## Simple feature collection with 5 features and 2 fields ## Geometry type: GEOMETRY ## Dimension: XY ## Bounding box: xmin: -61567.21 ymin: -3797115 xmax: -48812.79 ymax: -3755803 ## Projected CRS: WGS_1984_Transverse_Mercator ## # A tibble: 5 × 3 ## National_ `n()` geometry ## &lt;chr&gt; &lt;int&gt; &lt;GEOMETRY [m]&gt; ## 1 Hangklip Sand Fynbos 2 MULTIPOINT ((-52770.86 -3780207), (-52712… ## 2 Peninsula Granite Fynbos - South 6 MULTIPOINT ((-56255.7 -3773991), (-53832.… ## 3 Peninsula Sandstone Fynbos 599 MULTIPOINT ((-61567.21 -3780031), (-61557… ## 4 Peninsula Shale Renosterveld 1 POINT (-55866.09 -3755803) ## 5 Southern Afrotemperate Forest 2 MULTIPOINT ((-53662.7 -3762122), (-53621.… Yup! Note the numbers in column n(). But I can’t see where the Hangklip Sand Fynbos record is, so let’s label that one with text using geom_sf_label(). hsf &lt;- pc %&gt;% filter(National_ == &quot;Hangklip Sand Fynbos&quot;) #find the locality ggplot() + annotation_map_tile(type = &quot;osm&quot;, progress = &quot;none&quot;) + geom_sf(data=pc, aes(col = National_)) + scale_colour_manual(values = pal) + geom_sf_label(data=hsf, aes(label = &quot;Here&quot;)) Aha! Note that you can specify that the label = setting points to a column in your dataset with names if you have lots of labels to add. 7.14 Buffering One issue here may be that all localities should be in Peninsula Sandstone Fynbos, but the vegetation type boundaries are wrong. After all, the transition or ecotone between two vegetation types is usually diffuse rather than a clear boundary, not to mention that the data may have been digitized at a very small scale, compromizing precision and accuracy. One way to check this is to buffer the points using st_buffer to see if they are within some distance (say 250m) of the boundary with Peninsula Sandstone Fynbos. #Find the localities that are not in Peninsula Sandstone Fynbos and add a 250m buffer npsf &lt;- pc %&gt;% filter(National_ != &quot;Peninsula Sandstone Fynbos&quot;) %&gt;% st_buffer(dist = 250) #NOTE that st_buffer() makes them polygons, because they now have area! npsf$geometry[1] #The first geometry in npsf ## Geometry set for 1 feature ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: -53912.7 ymin: -3762372 xmax: -53412.7 ymax: -3761872 ## Projected CRS: WGS_1984_Transverse_Mercator ## POLYGON ((-53412.7 -3762122, -53413.05 -3762136... #Get the number of unique iNaturalist record numbers length(unique(npsf$id)) ## [1] 11 #Intersect new polygons with veg remnants and filter for those that overlap Peninsula Sandstone Fynbos only npsf &lt;- st_intersection(npsf, vegr) %&gt;% filter(National_.1 == &quot;Peninsula Sandstone Fynbos&quot;) ## Warning: attribute variables are assumed to be spatially constant throughout all ## geometries #Get the number of unique iNaturalist record numbers that overlap PSF length(unique(npsf$id)) ## [1] 6 So 7 of 16 records are suspiciously close to Peninsula Sandstone Fynbos… 7.15 Within distance and intersect Perhaps a more interesting use of buffering is to see if a species is within a certain distance of a particular habitat etc. For example, we could ask if a species is associated with riparian zones by buffering either the localities (points) or rivers (lines) and then doing an intersection. But of course there are many ways to skin a cat, and it turns out buffering and intersecting may not be the most efficient here. If we don’t want to pull the attribute data from one dataset to the other we can just use st_intersects() to see if they overlap at all. We can even take it one step further, because sf has the function st_is_within_distance(), which is similar to applying st_buffer() and st_intersects() in one go. Here we’ll use Brabejum stellatifolium (a riparian tree) as our focal species and the watercourse layer from the City of Cape Town. #Get the watercourse data water &lt;- st_read(&quot;data/cape_peninsula/Open_Watercourses.geojson&quot;) ## Reading layer `Open_Watercourses&#39; from data source ## `/home/jasper/GIT/spatial-r/data/cape_peninsula/Open_Watercourses.geojson&#39; ## using driver `GeoJSON&#39; ## Simple feature collection with 10848 features and 11 fields ## Geometry type: MULTILINESTRING ## Dimension: XY ## Bounding box: xmin: 18.31249 ymin: -34.28774 xmax: 18.99045 ymax: -33.47256 ## Geodetic CRS: WGS 84 #Check it&#39;s CRS st_crs(water) ## Coordinate Reference System: ## User input: WGS 84 ## wkt: ## GEOGCRS[&quot;WGS 84&quot;, ## DATUM[&quot;World Geodetic System 1984&quot;, ## ELLIPSOID[&quot;WGS 84&quot;,6378137,298.257223563, ## LENGTHUNIT[&quot;metre&quot;,1]]], ## PRIMEM[&quot;Greenwich&quot;,0, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], ## CS[ellipsoidal,2], ## AXIS[&quot;geodetic latitude (Lat)&quot;,north, ## ORDER[1], ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], ## AXIS[&quot;geodetic longitude (Lon)&quot;,east, ## ORDER[2], ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], ## ID[&quot;EPSG&quot;,4326]] #Call the data directly from iNat bs &lt;- get_inat_obs(taxon_name = &quot;Brabejum stellatifolium&quot;, bounds = c(-35, 18, -33.5, 18.5), maxresults = 1000) #Filter returned observations by a range of attribute criteria bs &lt;- bs %&gt;% filter(positional_accuracy&lt;46 &amp; latitude&lt;0 &amp; !is.na(latitude) &amp; captive_cultivated == &quot;false&quot; &amp; quality_grade == &quot;research&quot;) #Make the dataframe a spatial object of class = &quot;sf&quot; bs &lt;- st_as_sf(bs, coords = c(&quot;longitude&quot;, &quot;latitude&quot;), crs = 4326) #Note that I had to define the CRS (as Geographic WGS84)!!! Let’s see what we’ve got… #Crop the water courses to the extent of the locality data water &lt;- st_crop(water, bs) ## Warning: attribute variables are assumed to be spatially constant throughout all ## geometries #Plot ggplot() + annotation_map_tile(type = &quot;osm&quot;, progress = &quot;none&quot;) + geom_sf(data = water, colour = &quot;blue&quot;) + geom_sf(data=bs) Hard to tell, but they could all be on rivers? Let’s try st_intersects() without any buffering first to see if they overlap at all. st_intersects(bs, water) %&gt;% unlist() ## integer(0) Oops! We forgot to project our data! bs &lt;- st_transform(bs, st_crs(vegr)) water &lt;- st_transform(water, st_crs(vegr)) st_intersects(bs, water) %&gt;% unlist() ## integer(0) So none of them intersect, but this is not surprising, because lines and points in GIS do not have area, so they can’t really intersect unless you buffer them… Let’s try st_is_within_distance() and set it for 20 metres. Note that I add unlist() %&gt;% unique() because the function returns a list and will return the same feature (line/river) multiple times - once for every point (tree) it is within 20m of. st_is_within_distance(bs, water, 20) %&gt;% unlist() %&gt;% unique() ## [1] 327 346 328 330 332 264 351 347 349 885 179 294 285 333 101 224 280 281 282 ## [20] 615 19 So it’s given us the list of lines (rivers) within 20m of our points, but that doesn’t tell us how many (or what proportion) of our points are within 20m of a river. Let’s apply the function again, swapping the layers around: st_is_within_distance(water, bs, 20) %&gt;% unlist() %&gt;% unique() ## [1] 160 145 161 171 84 104 113 18 121 98 99 1 14 38 69 70 138 139 24 ## [20] 34 37 54 88 90 153 17 137 123 10 11 12 25 32 64 85 86 114 33 ## [39] 87 19 82 81 83 94 149 So only ~30 of the trees are within 20m of the rivers. What about 50m? st_is_within_distance(water, bs, 100) %&gt;% unlist() %&gt;% unique() ## [1] 15 102 160 145 161 171 28 40 58 126 152 84 104 113 22 29 18 36 67 ## [20] 89 105 107 108 109 117 121 125 133 136 162 116 140 163 106 134 135 98 99 ## [39] 66 48 144 91 1 6 7 14 31 37 38 42 44 45 49 54 69 70 76 ## [58] 77 78 79 80 96 101 111 122 128 130 131 132 138 139 153 155 166 13 23 ## [77] 24 34 47 56 57 71 72 73 74 75 88 90 103 17 137 123 5 10 11 ## [96] 12 25 32 33 64 85 86 114 124 167 87 19 27 82 164 2 3 81 83 ## [115] 94 149 100 So about 90… It’s at this point that it’s worth thinking about the scale, precision and accuracy of both the species localities and the watercourse data before drawing any strong conclusions!!! "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
