[["index.html", "A Minimal Introduction to GIS in R 1 Overview", " A Minimal Introduction to GIS in R Jasper Slingsby 2021-05-25 1 Overview This is a minimal introduction to GIS and handling spatial data in R compiled for the Biological Sciences BSc(Honours) class at the University of Cape Town. The goal is to give you a very brief introduction to Geographic Information Systems (GIS) in general and some familiarity with handling spatial data in R. GIS is a field of research that many people dedicate their entire lives to, yet we only have a week, so this really is a minimalist introduction. I’ll focus on giving you a broad overview and some idea of how to teach yourself (using R). The 5-day module includes daily ~1 hour lectures followed by self-study time where you will have daily goals/tasks to help you incrementally develop your own project. The project will be the deliverable for the module. I will be available for set office hours every afternoon to assist you. These course notes borrow or paraphrase extensively from Adam Wilson’s GEO 511 Spatial Data Science course, Manny Gimond’s Intro to GIS &amp; Spatial Analysis and the 2020 series of GIS Lecture Lunches by Thomas Slingsby and Nicholas Lindenberg from UCT Library’s GIS Support Unit. Other very valuable resources include: Lovelace et al’s online book Geocomputation with R Ryan Garnett’s cheatsheet for library(sf) This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License. "],["intro.html", "2 Why care about GIS?", " 2 Why care about GIS? How lost would you be without Google Maps? Figure 2.1: Screenshot of Google Maps for Cape Town. If we search “Geographic Information Systems OR GIS” in Web of Science, it is clear that the number of papers using GIS has exploded over time! Figure 2.2: The number of papers on Web of Science when searching Geographic Information Systems OR GIS. GIS is especially important in environment and life sciences! Figure 2.3: The number of papers on Web of Science by theme when searching Geographic Information Systems OR GIS. We use it for things like mapping ecosystems and biomes. Figure 2.4: The historical extent of the biomes of South Africa. Or the loss of ecosystems and biomes. Figure 2.5: The remaining extent of the biomes of South Africa. Although the outcomes of GIS analyses are not always maps, e.g. this table from Skowno et al. (2021). But it can also be interactive! Figure 2.6: The Global Forest Watch app. You can label chapter and section titles using {#label} after them, e.g., we can reference Chapter 2. If you do not manually label them, there will be automatic labels anyway, e.g., Chapter ??. Figures and tables with captions will be placed in figure and table environments, respectively. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Figure 2.7: Here is a nice figure! Reference a figure by its code chunk label with the fig: prefix, e.g., see Figure 2.7. Similarly, you can reference tables generated from knitr::kable(), e.g., see Table 2.1. knitr::kable( head(iris, 20), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 2.1: Here is a nice table! Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa 4.6 3.4 1.4 0.3 setosa 5.0 3.4 1.5 0.2 setosa 4.4 2.9 1.4 0.2 setosa 4.9 3.1 1.5 0.1 setosa 5.4 3.7 1.5 0.2 setosa 4.8 3.4 1.6 0.2 setosa 4.8 3.0 1.4 0.1 setosa 4.3 3.0 1.1 0.1 setosa 5.8 4.0 1.2 0.2 setosa 5.7 4.4 1.5 0.4 setosa 5.4 3.9 1.3 0.4 setosa 5.1 3.5 1.4 0.3 setosa 5.7 3.8 1.7 0.3 setosa 5.1 3.8 1.5 0.3 setosa You can write citations, too. For example, we are using the bookdown package (Xie 2020) in this sample book, which was built on top of R Markdown and knitr (Xie 2015). "],["gis-basics.html", "3 GIS basics 3.1 What is GIS? 3.2 How do we do GIS? 3.3 How to get help?", " 3 GIS basics Here we cover the basics of GIS… 3.1 What is GIS? A Geographic Information System is a framework used to create, manage, visualize and analyze data in a spatial context. Most datasets can be assigned a spatial location, either on the earth’s surface or within some constrained area like a sports field, a vegetation survey plot, or even a drawer in your kitchen. While almost any dataset has a spatial context, and can thus be represented in a GIS, the real question is whether it needs to be analyzed in a GIS environment? The answer to this question depends on the purpose of the analysis. Typically, one would use GIS if you were using the spatial information associated with the data to: access data elements (e.g. select data by spatial location or coverage), perform analytical operations (e.g. overlay and merge two datasets to produce a new dataset), or render visualizations (e.g. generate a map). There are many many operations and functions within each of these three major operation types. There are also many support functions and operations that are common across the operation types (e.g. reading/writing data objects). We’ll delve into these later. 3.2 How do we do GIS? There are a large number of software packages for doing GIS. Some are free, while others require you to pay for a license. They also vary in what they do (or the combination of things they do). For example, some of the best known desktop GIS applications, which is what your average GIS user is interested in, include: ArcGIS - a commercial product that works on Windows only (or online). UCT has a site license, which provides a set number of user licenses for UCT postgrads and staff (see section 3.3 for details). Note that ArcGIS is an ESRI product and comes with (or can be upgraded to include) a suite of other (commercial) software components in addition to the desktop application QGIS - free and open source software (FOSS) for Windows, Mac or Linux Google Earth - free (for now), but not open source, for Windows, Mac, Linux, or online Desktop GIS applications are typically graphical user interfaces (GUIs) that call on various other geospatial libraries to do the actual data processing (think of these as sets of functions or tools). Some examples of FOSS geospatial libraries are GDAL and GEOS, which are designed to deal with different data models and/or file types. We can also do GIS by calling the geospatial libraries and other GIS software types directly with various programming languages. While we can use many (or just about any) coding language, there are a few for which the functions and syntax are better developed for the user, including: R Python JavaScript A major advantage of using these general purpose programming languages for your GIS work is that it allows you take advantage of their functions for statistical analyses and presentation etc all in one environment and/or work flow. This also makes it much easier to make your research reproducible. Note that the geospatial libraries and the other GIS softwares that we call are coded in a variety of other languages, such as Java, C/C++, C# or SQL, but these languages are typically less user friendly and/or more difficult to learn. Other “GIS software types” include: spatial databases such as PostGIS, which is free and open source software (FOSS) for Windows, Mac or Linux and great for storing and querying large and complex datasets web mapping such as MapServer or GeoServer 3.3 How to get help? UCT has a GIS Support Unit to assist UCT staff and postgraduate researchers with their GIS and spatial data needs. Their primary goal is to help users develop their GIS skills in order to perform sound data capture, geospatial analysis and map production. They can help you with: Troubleshooting, Project Planning, Analysis, Cartographic Design and Data Handling. GIS Training Applying for an ESRI (ArcMAP) Software license. Note that they predominantly work with ESRI and QGIS and don’t provide support for R, etc. That said, many GIS work flow issues are common across platforms, and the support unit really know what they’re doing. They’re also a good source of data if you’re struggling to find what you need, but please do your homework before asking them for data! Lastly… I am not a help desk!!! The goal for this module is to teach you how to help yourself. I’m available to help in the afternoon office hours during this module, but unfortunately, while I would love to, I do not have the time to help you all with your GIS or R issues for the rest of your careers… You can find the answer to any issue you are encountering in an online forum like GIS Stack Exchange. I typically just type my questions (or copy and past error messages) directly into Google. The trick is working out what to ask, and sometimes you need to reword your question a couple of times to find the answer you need. If you’re really getting nowhere, you can even post your question on a forum, although it is unlikely that you’ll ever need to do this… "],["gis-data-models-and-file-formats.html", "4 GIS data models and file formats 4.1 Data models 4.2 Attribute data 4.3 File formats", " 4 GIS data models and file formats 4.1 Data models GIS data typically come in two data model types vector or raster. 4.1.1 Vector data The three basic vector data types are points, lines (also sometimes referred to as polylines or linestrings) and polygons. While they are treated as different data types, you can also consider them to be a nested hierarchy. For example, to make a line you need two or more points, while a polygon requires three or more lines. Figure 4.1: The hierarchical construction of vector data types. From this we can observe the different properties of the data types: a point is a location in space defined by a set of coordinates based on a coordinate reference system (more about these later) a line is two or more points with straight lines connecting them, where each line has a length a polygon is a set of points connected by lines that form a closed shape, which has an area Note that these “data types” are also commonly called feature classes, geometric primitives or geometries. Later we’ll see that you get more complicated “types,” but these are generally combinations of the above: multipoint, multilinestring, multipolygon, geometry collection, etc and are largely just different data classes designed to help with handling data than unique geometries. 4.1.2 Raster data Raster data are essentially data stored in a regular grid of pixels (or cells). The value of each pixel is a number representing a measured value (e.g. continuous data such as sea surface temperature) or a category (e.g. discrete data such as land cover class). All pixels have a value, even if the value is “No Data.” Digital images like jpeg or png files are essentially rasters without spatial information. Rasters are particularly useful for representing continuous data. Discrete data are often better presented as vector polygons. For example: Figure 4.2: Vector (polygon) representation of discrete data; the vegetation types of the Cape Peninsula. Vector data models are typically good at representing categorical data, especially where they may have complex boundaries. You just have to choose a good colour palette… Figure 4.3: Raster representation of continuous data; a digital elevation model of the Cape Peninsula. Rasters are great for continuous data. If this was a vector plot, each pixel would have to be its own polygon and the legend would have a separate entry for each unique value, &gt;60 000 entries!!! That said, you can represent continuous values with a vector data model quite effectively if you bin the continuous data into classes, such as one can do with a filled contour plot, e.g. Figure 4.4: Vector representation of continuous data; a filled contour plot of a digital elevation model of the Cape Peninsula using 100m contours. In truth, I generated this plot from a raster data object (the digital elevation model), but to plot it R had to convert the raster to a set of vector polygons first. You’ll find that you often need to convert data between vector and raster models for various reasons, and we’ll cover that later. Figure 4.5: Raster representation the discrete data; the vegetation types of the Cape Peninsula. Rasters are usually not that good at representing categorical data. Note that most raster file formats (and GIS software) can only store numeric data, so this plot misleadingly represents the vegetation types as continuous data. You can label and represent categorical data in rasters in R, but this is usually more effort than its worth and is almost always less effective than using a vector format… A common exception is land use and land cover (LULC) maps, where remotely sensed satellite imagery (raster data) are classified into predefined classes (e.g. agriculture, rock, grassland, etc) based on various criteria or algorithms. Even then, these are best visualized as interactive rather than static maps so you can make sense of them by zooming in and panning around. 4.2 Attribute data Attributes are what we know about the objects represented in a layer in addition to their geometry - i.e. each spatial object usually has additional information associated with it. These data are usually stored in an associated Attribute Table. Here are the first few entries of the attribute table for our Cape Peninsula vegetation layer: AREA_HCTR PRMT_MTR veg type Subtype Community geometry 66 6.774255 1596.83494 Beach - FalseBay BEACH Need to Find Out POLYGON ((-46661.36 -380319… 67 14.151168 3886.68578 Beach - FalseBay BEACH Need to Find Out POLYGON ((-47252.77 -380298… 68 8.575597 2154.00714 Beach - FalseBay BEACH Need to Find Out POLYGON ((-49001.26 -380249… 69 0.000001 23.25575 Beach - FalseBay BEACH Need to Find Out POLYGON ((-49353.38 -380223… 70 5.333203 3589.09436 Beach - FalseBay BEACH Need to Find Out POLYGON ((-50030.98 -380131… 71 24.448116 7378.70451 Beach - FalseBay BEACH Need to Find Out POLYGON ((-53108.73 -379998… Note that vector data generally have attribute tables, but they are rare for raster layers, because most raster file formats can store just one attribute per cell (e.g. elevation) and can’t have associated attribute tables. A handy feature of most GIS systems is that they can treat attribute tables like relational database table structures. Additional information can be joined onto your spatial data by joining two tables with a common key field, as one does when joining two tables of non-spatial data. In GIS, this is called an “Attribute Join,” because you have joined the tables by attribute and haven’t used spatial information (also sometimes called a “non-spatial join”). We’ll learn about “spatial joins” later… 4.3 File formats Linked to data models, and attributes, is file formats. Generally, there are separate file formats for vector vs raster data. Usually, we even have separate files for the different types of vectors (points, lines, polygons, etc), but this is changing as new “database” formats evolve. There is a huge variety of GIS file formats, which have proliferated as different software packages have developed their own set of “native” formats. Each of these have different properties in terms of the data they store, whether they can include attribute data, file size and compression, and of course how they actually store (and retrieve) the data. Many of these, like the ESRI formats, are proprietary (i.e. not open source). If you’ve done any GIS before, you’ll be familiar with ESRI shapefiles, which usually include a group of 3 or more files with the same name, but a different file extension. Each file stores different information. The most common ones are: .shp = the main feature geometry .shx = an index file, used for searching etc .dbf = stores the attribute information .prj = stores the coordinate reference system etc = there are many other optional files that may be present depending on the data stored Shapefiles are by far the most common format for vector data. For raster data, the most common format is probably GeoTIFF (.tif) or ASCII (.asc). You can view the lists of most of the file types supported by R (or at least the types supported by the GDAL geospatial library) by running the code rgdal::ogrDrivers() for vector drivers, which gives this output: name long_name write copy isVector AeronavFAA Aeronav FAA FALSE FALSE TRUE AmigoCloud AmigoCloud TRUE FALSE TRUE ARCGEN Arc/Info Generate FALSE FALSE TRUE AVCBin Arc/Info Binary Coverage FALSE FALSE TRUE AVCE00 Arc/Info E00 (ASCII) Coverage FALSE FALSE TRUE BNA Atlas BNA TRUE FALSE TRUE CAD AutoCAD Driver FALSE FALSE TRUE Carto Carto TRUE FALSE TRUE Cloudant Cloudant / CouchDB TRUE FALSE TRUE CouchDB CouchDB / GeoCouch TRUE FALSE TRUE CSV Comma Separated Value (.csv) TRUE FALSE TRUE CSW OGC CSW (Catalog Service for the Web) FALSE FALSE TRUE DGN Microstation DGN TRUE FALSE TRUE DXF AutoCAD DXF TRUE FALSE TRUE EDIGEO French EDIGEO exchange format FALSE FALSE TRUE ElasticSearch Elastic Search TRUE FALSE TRUE ESRI Shapefile ESRI Shapefile TRUE FALSE TRUE Geoconcept Geoconcept TRUE FALSE TRUE GeoJSON GeoJSON TRUE FALSE TRUE Geomedia Geomedia .mdb FALSE FALSE TRUE GeoRSS GeoRSS TRUE FALSE TRUE GFT Google Fusion Tables TRUE FALSE TRUE GML Geography Markup Language (GML) TRUE FALSE TRUE GMLAS Geography Markup Language (GML) driven by application schemas FALSE TRUE TRUE GPKG GeoPackage TRUE TRUE TRUE GPSBabel GPSBabel TRUE FALSE TRUE GPSTrackMaker GPSTrackMaker TRUE FALSE TRUE GPX GPX TRUE FALSE TRUE HTF Hydrographic Transfer Vector FALSE FALSE TRUE HTTP HTTP Fetching Wrapper FALSE FALSE TRUE Idrisi Idrisi Vector (.vct) FALSE FALSE TRUE Interlis 1 Interlis 1 TRUE FALSE TRUE Interlis 2 Interlis 2 TRUE FALSE TRUE JML OpenJUMP JML TRUE FALSE TRUE JP2OpenJPEG JPEG-2000 driver based on OpenJPEG library FALSE TRUE TRUE KML Keyhole Markup Language (KML) TRUE FALSE TRUE LIBKML Keyhole Markup Language (LIBKML) TRUE FALSE TRUE MapInfo File MapInfo File TRUE FALSE TRUE Memory Memory TRUE FALSE TRUE MSSQLSpatial Microsoft SQL Server Spatial Database TRUE FALSE TRUE MySQL MySQL TRUE FALSE TRUE NAS NAS - ALKIS FALSE FALSE TRUE netCDF Network Common Data Format TRUE TRUE TRUE ODBC ODBC TRUE FALSE TRUE ODS Open Document/ LibreOffice / OpenOffice Spreadsheet TRUE FALSE TRUE OGR_DODS OGR_DODS FALSE FALSE TRUE OGR_GMT GMT ASCII Vectors (.gmt) TRUE FALSE TRUE OGR_OGDI OGDI Vectors (VPF, VMAP, DCW) FALSE FALSE TRUE OGR_PDS Planetary Data Systems TABLE FALSE FALSE TRUE OGR_SDTS SDTS FALSE FALSE TRUE OGR_VRT VRT - Virtual Datasource FALSE FALSE TRUE OpenAir OpenAir FALSE FALSE TRUE OpenFileGDB ESRI FileGDB FALSE FALSE TRUE OSM OpenStreetMap XML and PBF FALSE FALSE TRUE PCIDSK PCIDSK Database File TRUE FALSE TRUE PDF Geospatial PDF TRUE TRUE TRUE PGDUMP PostgreSQL SQL dump TRUE FALSE TRUE PGeo ESRI Personal GeoDatabase FALSE FALSE TRUE PLSCENES Planet Labs Scenes API FALSE FALSE TRUE PostgreSQL PostgreSQL/PostGIS TRUE FALSE TRUE REC EPIInfo .REC FALSE FALSE TRUE S57 IHO S-57 (ENC) TRUE FALSE TRUE SEGUKOOA SEG-P1 / UKOOA P1/90 FALSE FALSE TRUE SEGY SEG-Y FALSE FALSE TRUE Selafin Selafin TRUE FALSE TRUE SOSI Norwegian SOSI Standard FALSE FALSE TRUE SQLite SQLite / Spatialite TRUE FALSE TRUE SUA Tim Newport-Peace’s Special Use Airspace Format FALSE FALSE TRUE SVG Scalable Vector Graphics FALSE FALSE TRUE SXF Storage and eXchange Format FALSE FALSE TRUE TIGER U.S. Census TIGER/Line TRUE FALSE TRUE UK .NTF UK .NTF FALSE FALSE TRUE VDV VDV-451/VDV-452/INTREST Data Format TRUE FALSE TRUE VFK Czech Cadastral Exchange Data Format FALSE FALSE TRUE Walk Walk FALSE FALSE TRUE WAsP WAsP .map format TRUE FALSE TRUE WFS OGC WFS (Web Feature Service) FALSE FALSE TRUE XLS MS Excel format FALSE FALSE TRUE XLSX MS Office Open XML spreadsheet TRUE FALSE TRUE XPlane X-Plane/Flightgear aeronautical data FALSE FALSE TRUE Or rgdal::gdalDrivers() for raster drivers: name long_name create copy isRaster AAIGrid Arc/Info ASCII Grid FALSE TRUE TRUE ACE2 ACE2 FALSE FALSE TRUE ADRG ARC Digitized Raster Graphics TRUE FALSE TRUE AIG Arc/Info Binary Grid FALSE FALSE TRUE AirSAR AirSAR Polarimetric Image FALSE FALSE TRUE ARG Azavea Raster Grid format FALSE TRUE TRUE BAG Bathymetry Attributed Grid FALSE FALSE TRUE BIGGIF Graphics Interchange Format (.gif) FALSE FALSE TRUE BLX Magellan topo (.blx) FALSE TRUE TRUE BMP MS Windows Device Independent Bitmap TRUE FALSE TRUE BSB Maptech BSB Nautical Charts FALSE FALSE TRUE BT VTP .bt (Binary Terrain) 1.3 Format TRUE FALSE TRUE CAD AutoCAD Driver FALSE FALSE TRUE CALS CALS (Type 1) FALSE TRUE TRUE CEOS CEOS Image FALSE FALSE TRUE COASP DRDC COASP SAR Processor Raster FALSE FALSE TRUE COSAR COSAR Annotated Binary Matrix (TerraSAR-X) FALSE FALSE TRUE CPG Convair PolGASP FALSE FALSE TRUE CTable2 CTable2 Datum Grid Shift TRUE FALSE TRUE CTG USGS LULC Composite Theme Grid FALSE FALSE TRUE DERIVED Derived datasets using VRT pixel functions FALSE FALSE TRUE DIMAP SPOT DIMAP FALSE FALSE TRUE DIPEx DIPEx FALSE FALSE TRUE DODS DAP 3.x servers FALSE FALSE TRUE DOQ1 USGS DOQ (Old Style) FALSE FALSE TRUE DOQ2 USGS DOQ (New Style) FALSE FALSE TRUE DTED DTED Elevation Raster FALSE TRUE TRUE E00GRID Arc/Info Export E00 GRID FALSE FALSE TRUE ECRGTOC ECRG TOC format FALSE FALSE TRUE EHdr ESRI .hdr Labelled TRUE TRUE TRUE EIR Erdas Imagine Raw FALSE FALSE TRUE ELAS ELAS TRUE FALSE TRUE ENVI ENVI .hdr Labelled TRUE FALSE TRUE EPSILON Epsilon wavelets FALSE TRUE TRUE ERS ERMapper .ers Labelled TRUE FALSE TRUE ESAT Envisat Image Format FALSE FALSE TRUE FAST EOSAT FAST Format FALSE FALSE TRUE FIT FIT Image FALSE TRUE TRUE FujiBAS Fuji BAS Scanner Image FALSE FALSE TRUE GenBin Generic Binary (.hdr Labelled) FALSE FALSE TRUE GFF Ground-based SAR Applications Testbed File Format (.gff) FALSE FALSE TRUE GIF Graphics Interchange Format (.gif) FALSE TRUE TRUE GMT GMT NetCDF Grid Format FALSE TRUE TRUE GPKG GeoPackage TRUE TRUE TRUE GRASSASCIIGrid GRASS ASCII Grid FALSE FALSE TRUE GRIB GRIdded Binary (.grb) FALSE FALSE TRUE GS7BG Golden Software 7 Binary Grid (.grd) TRUE TRUE TRUE GSAG Golden Software ASCII Grid (.grd) FALSE TRUE TRUE GSBG Golden Software Binary Grid (.grd) TRUE TRUE TRUE GSC GSC Geogrid FALSE FALSE TRUE GTiff GeoTIFF TRUE TRUE TRUE GTX NOAA Vertical Datum .GTX TRUE FALSE TRUE GXF GeoSoft Grid Exchange Format FALSE FALSE TRUE HDF4 Hierarchical Data Format Release 4 FALSE FALSE TRUE HDF4Image HDF4 Dataset TRUE FALSE TRUE HDF5 Hierarchical Data Format Release 5 FALSE FALSE TRUE HDF5Image HDF5 Dataset FALSE FALSE TRUE HF2 HF2/HFZ heightfield raster FALSE TRUE TRUE HFA Erdas Imagine Images (.img) TRUE TRUE TRUE HTTP HTTP Fetching Wrapper FALSE FALSE TRUE IDA Image Data and Analysis TRUE FALSE TRUE ILWIS ILWIS Raster Map TRUE TRUE TRUE INGR Intergraph Raster TRUE TRUE TRUE IRIS IRIS data (.PPI, .CAPPi etc) FALSE FALSE TRUE ISCE ISCE raster TRUE FALSE TRUE ISIS2 USGS Astrogeology ISIS cube (Version 2) TRUE FALSE TRUE ISIS3 USGS Astrogeology ISIS cube (Version 3) TRUE TRUE TRUE JAXAPALSAR JAXA PALSAR Product Reader (Level 1.1/1.5) FALSE FALSE TRUE JDEM Japanese DEM (.mem) FALSE FALSE TRUE JP2OpenJPEG JPEG-2000 driver based on OpenJPEG library FALSE TRUE TRUE JPEG JPEG JFIF FALSE TRUE TRUE KMLSUPEROVERLAY Kml Super Overlay FALSE TRUE TRUE KRO KOLOR Raw TRUE FALSE TRUE L1B NOAA Polar Orbiter Level 1b Data Set FALSE FALSE TRUE LAN Erdas .LAN/.GIS TRUE FALSE TRUE LCP FARSITE v.4 Landscape File (.lcp) FALSE TRUE TRUE Leveller Leveller heightfield TRUE FALSE TRUE LOSLAS NADCON .los/.las Datum Grid Shift FALSE FALSE TRUE MAP OziExplorer .MAP FALSE FALSE TRUE MBTiles MBTiles TRUE TRUE TRUE MEM In Memory Raster TRUE FALSE TRUE MFF Vexcel MFF Raster TRUE TRUE TRUE MFF2 Vexcel MFF2 (HKV) Raster TRUE TRUE TRUE MRF Meta Raster Format TRUE TRUE TRUE MSGN EUMETSAT Archive native (.nat) FALSE FALSE TRUE NDF NLAPS Data Format FALSE FALSE TRUE netCDF Network Common Data Format TRUE TRUE TRUE NGSGEOID NOAA NGS Geoid Height Grids FALSE FALSE TRUE NITF National Imagery Transmission Format TRUE TRUE TRUE NTv2 NTv2 Datum Grid Shift TRUE FALSE TRUE NWT_GRC Northwood Classified Grid Format .grc/.tab FALSE FALSE TRUE NWT_GRD Northwood Numeric Grid Format .grd/.tab TRUE TRUE TRUE OGDI OGDI Bridge FALSE FALSE TRUE OZI OziExplorer Image File FALSE FALSE TRUE PAux PCI .aux Labelled TRUE FALSE TRUE PCIDSK PCIDSK Database File TRUE FALSE TRUE PCRaster PCRaster Raster File TRUE TRUE TRUE PDF Geospatial PDF TRUE TRUE TRUE PDS NASA Planetary Data System FALSE FALSE TRUE PLMOSAIC Planet Labs Mosaics API FALSE FALSE TRUE PLSCENES Planet Labs Scenes API FALSE FALSE TRUE PNG Portable Network Graphics FALSE TRUE TRUE PNM Portable Pixmap Format (netpbm) TRUE FALSE TRUE PostGISRaster PostGIS Raster driver FALSE TRUE TRUE PRF Racurs PHOTOMOD PRF FALSE FALSE TRUE R R Object Data Store FALSE TRUE TRUE Rasterlite Rasterlite FALSE TRUE TRUE RIK Swedish Grid RIK (.rik) FALSE FALSE TRUE RMF Raster Matrix Format TRUE FALSE TRUE ROI_PAC ROI_PAC raster TRUE FALSE TRUE RPFTOC Raster Product Format TOC format FALSE FALSE TRUE RRASTER R Raster FALSE FALSE TRUE RS2 RadarSat 2 XML Product FALSE FALSE TRUE RST Idrisi Raster A.1 TRUE TRUE TRUE SAFE Sentinel-1 SAR SAFE Product FALSE FALSE TRUE SAGA SAGA GIS Binary Grid (.sdat) TRUE TRUE TRUE SAR_CEOS CEOS SAR Image FALSE FALSE TRUE SDTS SDTS Raster FALSE FALSE TRUE SENTINEL2 Sentinel 2 FALSE FALSE TRUE SGI SGI Image File Format 1.0 TRUE FALSE TRUE SNODAS Snow Data Assimilation System FALSE FALSE TRUE SRP Standard Raster Product (ASRP/USRP) FALSE FALSE TRUE SRTMHGT SRTMHGT File Format FALSE TRUE TRUE Terragen Terragen heightfield TRUE FALSE TRUE TIL EarthWatch .TIL FALSE FALSE TRUE TSX TerraSAR-X Product FALSE FALSE TRUE USGSDEM USGS Optional ASCII DEM (and CDED) FALSE TRUE TRUE VICAR MIPL VICAR file FALSE FALSE TRUE VRT Virtual Raster TRUE TRUE TRUE WCS OGC Web Coverage Service FALSE FALSE TRUE WEBP WEBP FALSE TRUE TRUE WMS OGC Web Map Service FALSE TRUE TRUE WMTS OGC Web Mab Tile Service FALSE TRUE TRUE XPM X11 PixMap Format FALSE TRUE TRUE XYZ ASCII Gridded XYZ FALSE TRUE TRUE ZMap ZMap Plus Grid FALSE TRUE TRUE Lots!!! But note that there are others that are not supported in R. Perhaps the most common unsupported ones you’ll encounter are the ESRI geodatabases (.gdb and .mdb), which are designed for ArcGIS and are super efficient (in ArcGIS), but ESRI haven’t released the drivers, so they don’t work (or at least not properly) for most other GIS software… Note that there has been a big push to develop a standardized set of open source, efficient and interoperable file formats. Some examples to watch: GeoPackage - SQLite database containers for storing vector, raster and attribute data in a compact and transferable format. GeoJSON - a geographic version of JSON (JavaScript Object Notation) for vector data, very commonly used for web apps etc. Cloud-optimized GeoTIFF - as the name suggests; a GeoTIFF-based format for optimally hosting and allowing querying and downloading of raster data on the cloud… Simple Features - an open, efficient and interoperable standard for vector data. "],["some-important-concepts-and-pitfalls.html", "5 Some important concepts and pitfalls 5.1 Scale 5.2 Coordinate Reference Systems (CRS)", " 5 Some important concepts and pitfalls 5.1 Scale All maps have a scale. Scale is the ratio between the size of the representation of an object and its size in reality. E.g. objects on a 1:50,000 scale map are drawn at 1/50,000 their size, so 1cm on the map represents a distance of 500m in reality (i.e. \\(1*50,000 = 50,000cm = 500m\\)). GIS is usually scaleless (or at least flexible in scale); we can “zoom in” as much as we want to, and perform operations at just about any scale we want to, but should we? There are lots of issues we need to consider! Representation… There are 2 issues here: Firstly, a 1mm thick line on a 1:50,000 scale map would be 50m wide in reality. A 5m wide road would be 1/10mm on the map. Would the map be readable? Sometimes we break the rules of scale to make maps readable. Bear this in mind! Secondly, scale and representation also becomes an issue of how to capture data in the first place. For example, a road is typically best represented as a line at 1:5,000 scale or smaller (note that scale is a ratio, so “small scale” = large extent or area!). At 1:1,000 scale a 5m wide road would be 5mm across on the map, so one might capture it as a polygon to represent its area. Accuracy of location versus scale of data capture. We should always check the scale at which the data were captured to make sure it is accurate enough for the scale of the analysis we are doing. For example, the various vegetation units in the National Vegetation Map of South Africa were mapped at a range of scales, some as small as 1:250,000. At this scale 1mm = 250m, so a minor digitization error is a huge difference on the ground! If you need your analysis to be accurate to &lt;10m then you’d probably need data mapped at a scale larger than 1:10,000. Precision - Can mean two things: The unit or number of decimal places to which the attribute has been measured (and can be stored) The spread of repeat measurements (typically in field data collection). A big spread means the measurements weren’t very precise… A quick aside on the difference between accuracy and precision! Figure 5.1: The difference between accuracy and precision. A last word on Scale… For vector data, we typically refer to scale when describing a data set. For raster data, we typically refer to pixel resolution (or sample interval). For example, a 30m digital elevation model is made up of pixels 30m across. For remotely sensed imagery (i.e. from drone, plane or satellite), one often uses the term “ground sample distance.” 5.2 Coordinate Reference Systems (CRS) Coordinate Reference Systems (CRS) provide a framework for defining real-world locations. There are many different CRSs, with different properties. They can be a minefield, and I don’t have the time to cover them in any detail here. I provide some of the basics below, and list some of the golden rules (mostly from the GIS Support Unit) here. Some of these may only make sense once we’ve been through the rest of this section… If things don’t line up, its probably a CRS issue. You need to know what CRS your dataset is in. This is essential, because you need to define your projections to be able to compare datasets. If they are not the same, you will need to reproject one to align with the other*. If your datasets are not in the same CRS, most GIS software will give you warning or error messages, but not always! Note that not all file formats store the CRS “metadata,” so check and store it yourself if needed! You need to make sure you use a CRS that best preserves the properties you are interested in (area, distance, direction, shape). More on this below in section 5.2.2. If your areas and distances are stupidly small (0.001 etc) your data are probably in Geographic (i.e. degrees and not a unit of distance like metres). Always interrogate and “common-sense-check” your results!!! *Defining Projection is not the same as reprojecting! Think in terms of languages, “I have text in Japanese and want it in English.” Defining is saying what it IS (“This text is in Japanese” - defining Japanese as English gives you garbage). Reprojecting is what you want it to be (i.e. translate Japanese to English). Two other issues to look out for: The official South African CRS is waiting to get you. If you see Gauss Conform run screaming, its a left handed CRS based on Southings and Westings (i.e. completely inverted…). Simple, yes? Datums… These are essentially models of the shape of the surface of the planet. Most South African datasets (since 1999 at least) use the Hartebeesthoek 94 datum, which is our local “bespoke” solution. It’s pretty much the same as the WGS84 datum (a good global datum), and the difference is negligible for most ecological analyses. Our former local “bespoke” datum (the Cape or Clarke1880 datum), which was often used for data before 1999, is out to get you. These datasets will never line up perfectly with modern data sets when reprojected in a normal GIS and will usually be a couple of tens of metres off… 5.2.1 Geographic (or “unprojected”) Coordinate Systems The most common coordinate system is latitude/longitude, also known as geographic, lat/long or sometimes WGS84. There are many ways to record geographic coordinates: Degrees, Minutes &amp; Seconds: S33°26’46”,E18°10’23’’ Decimal Degrees: -33.4461111,18.17305556 Most GIS prefer decimal degrees… The problem with doing analyses using geographic CRS is that lat/long coordinates are actually angular measurements on a 3D sphere (Geodesic) and degrees differ in their actual ground distance depending on where you are on the planet. They also differ in the N-S vs W-E plane! Figure 5.2: Map highlighting that a degree is larger at the equator than at the poles. Image source: https://annakrystalli.me/intro-r-gis/gis.html This means that Euclidean measurement calculations are not appropriate for calculating areas and distances. 5.2.2 Projected Coordinate Systems To perform linear measurements from a 3D shape using Euclidean methods, you need to squash that shape into a 2D plane. This squashing is called a projection… Figure 5.3: How many different ways could you flatten a naartjie peel? There are 4 properties that get distorted, you can pick which one gets preserved the best by a projection type: Shape - you want a Conformal projection Area - Equal-Area Distance - Equidistant Direction - Azimuthal Projections get tuned to best fit an area through the use of projection parameters. An example is the Transverse Mercator system used by the 1:50,000 map series and by Municipalities like Cape Town. This is a general-purpose map, so in order to keep all distortions to a minimum, the projection window is kept to narrow 2 degree-wide bands. As a result, our map series projection parameters are set by moving the central meridian (or tangent) line of longitude every odd degree across the country. Cape Town is close to 19°E, so our version is colloquially called ‘Lo-19.’ 5.2.3 Projection codes The type of CRS is usually (but not always) stored in the metadata of your file (or dataset, if it is comprised of many files like an ESRI shapefile). There are various formats for this, such as EPSG, PROJ4 or WKT (be warned, there are many more…). In R, to apply a CRS or reproject your data you typically need to know the EPSG or PROJ4 code. Fortunately, there is a huge online library of these at https://spatialreference.org/. I also provide some suggested projections, based on the properties you’d like to preserve, and their codes here. Note that for UTM and TM you may need to adjust the PROJ4 strings for your area - read the comments. Why do projections matter? #Map comparing SA or the world projected in different ways... 5.2.4 “On the fly” vs manual projection Note that some GIS tools can perform “on the fly” (re)projection of data. For example, by default ArcGIS sets the CRS for a project from the first dataset imported. When you want to visualize the data, it will reproject all other datasets to the set CRS so that it can visualize it properly. Similarly, ArcGIS and other software can project data in a geographic CRS to a projected CRS on the fly when asked to perform Euclidean measurement calculations. On the fly projection can clearly be very useful, but it can also be misleading if you don’t know what its doing. My take is that you should always check the default settings for the software you’re using, and check the set CRS(s) and individual dataset CRS(s) to make sure you are working in a suitable CRS for the operations you want to perform… "],["r-as-a-gis.html", "6 R as a GIS 6.1 Overview 6.2 Some key R packages", " 6 R as a GIS 6.1 Overview Points, lines, polygons and rasters - R can handle them all and more! R is a free software environment for statistical computing and graphics, but its abilities have been extended into many realms through the ~18,000 (!) contributed extension packages (also called libraries). The list of packages can be bewildering, but fortunately some great folks have taken the time to sift through and make some sense of them for different focal topics and created Task Views. For GIS there are two Task Views of interest: Spatial - maintained by Roger Bivand, and SpatioTemporal - maintained by Edzer Pebesma They overlap somewhat, but the latter specifically focuses on data where both location and time of observation are registered, and relevant for the analysis of the data. Each has an overview page listing packages and highlighting their respective strengths, weaknesses etc., e.g. Figure 6.1: Screenshot of the “Spatial” Task View at https://cran.r-project.org/ The Spatial Task View focuses on “Analysis of Spatial Data,” with sections on: Classes for spatial data and metadata Reading and writing spatial data Handling spatial data Analyzing spatial data Task Views also allow easy download and installation of all packages in a Task View using library(ctv)! - see code below. But beware! It can take a while to download and install if it is a big Task View and the the Spatial one is BIG!!! You don’t need the whole Task View for my tutorials, so don’t bother downloading it if you’re just working through these. Figure 6.2: Screenshot of the Task View landing page at https://cran.r-project.org/ Since you can’t copy the code from the image, here it is: install.packages(\"ctv\") ctv::install.views(\"Spatial\") 6.2 Some key R packages We don’t have time to go through all packages or provide a full history, but here are some useful notes in brief 6.2.1 For vector data (although some can handle rasters too) The two leading packages were sp and rgdal. While these are still very active and useful, they are being superseded by a newer package sf, which is a modern implementation and standardization of parts of sp. sf stands for “Simple Features for R,” in compliance with the OGC Simple Feature standard. It is highly efficient, and comes with the advantage that it uses Tidyverse principles and coding styles, e.g. allowing use of the pipe operator (%&gt;%) the direct application of library(dplyr) and library(ggplot2) functions. I will use sf for the most part in the demonstration material. Unfortunately, not all operations are available in sf yet and I may still have to use sp at times, especially when performing operations using both vector and raster data. 6.2.2 For raster data By far the best package has been raster, maintained by Robert Hijmans of WorldClim fame, and can do just about anything with rasters and interfaces with sp very nicely. raster is currently being superseded by a new package called terra, also being developed by Hijmans. “terra is very similar to the raster package; but terra is simpler, better, and faster” - Roger Bivand I’ve never used terra before developing this module, and it is far from mature. For most of the demonstrations we will use raster. "],["gis-operations-in-r.html", "7 GIS operations in R 7.1 Case study and demo datasets 7.2 Housekeeping", " 7 GIS operations in R 7.1 Case study and demo datasets Ok, for demonstrating some of the many GIS operations R can perform we will be using data from one of my favourite study areas, the Cape Peninsula. The datasets we sill use, some of their properties and where to source them are tabled below: Name Data.model Geometry.type File.format Data.source URL Localities Vector Point iNaturalist https://www.inaturalist.org/ Watercourses Vector Line ESRI shapefile City of Cape Town https://odp-cctegis.opendata.arcgis.com/datasets/open-watercourse Vegetation Types Vector Polygon ESRI shapefile City of Cape Town https://odp-cctegis.opendata.arcgis.com/datasets/indigenous-vegetation-current-extent Elevation Raster Raster GeoTIFF City of Cape Town https://odp-cctegis.opendata.arcgis.com/datasets/digital-elevation-model-10m-grid-general-binary-ascii If you’d like to follow along and run the analyses that follow, please follow the links and download the datasets. Please note that the elevation dataset is ~130MB. I’ll also put a copy of all datasets on the Vula site for the course, which I understand is zero-data rated. I’ll also demonstrate how to fetch a different, smaller elevation dataset directly from R, so if internet speed is an issue for you don’t download the elevation dataset… 7.2 Housekeeping Apologies, this bit is a little long-winded, but please read it carefully as it will likely affect your ability to run the code below. 7.2.1 Working directories I usually work from a “Project” in RStudio linked to a GIT repository (see https://git-scm.com/ and https://github.com/) for version control and easy code sharing/collaboration. I’m not going to go there with this tutorial, but it is worth exploring if you intend to do big projects in R. R projects set the working directory to a good place automatically. Alternatively you can use the setwd() function. If I’m not in a GIT repo or I am working with large data sets that I don’t want to replicate in every GIT repo on my hard drive I usually set separate “data,” “GIS data” (i.e. biggish data) and “results” working directories by making each path an object and inserting as appropriate for different read and write functions using paste() or paste0(). These would look something like: datwd = &quot;/home/jasper/Dropbox/Teaching/SpatialR/Example/Data/&quot; giswd = &quot;/home/jasper/Documents/GIS/&quot; reswd = &quot;/home/jasper/Dropbox/Teaching/SpatialR/Example/Results/&quot; 7.2.2 Sharing code between multiple machines If you plan run the same code on multiple machines (e.g. your laptop and a workstation) or are sharing code with a collaborator (and are not using GitHub) it’s easiest to automatically detect what computer the code is being run on and set the appropriate working directories (and anything else you like). This can be done by identifying the machine/user using Sys.getenv() and wrapping the code for setting working directories etc in an if() statement for each user, like so: Sys.getenv(&quot;USER&quot;) #Tells us the &quot;USER&quot; name on Mac or Linux ## [1] &quot;jasper&quot; If you are on Windows you need to use Sys.getenv(\"USERNAME\"). I don’t know why its different…? Then I can set up my if() statement. Note that each user/collaborator can set up their own if() statement one after the other because if the statement Sys.getenv(\"USER\")=='jasper' returns FALSE then R doesn’t run the chunk of code in the curly brackets { ... }. if (Sys.getenv(&quot;USER&quot;)==&#39;jasper&#39;) { datwd=&quot;/home/jasper/Dropbox/Teaching/SpatialR/Example/Data/&quot; giswd=&quot;/home/jasper/Dropbox/BlogData/&quot; reswd=&quot;/home/jasper/Dropbox/Teaching/SpatialR/Example/Results/&quot;} if (Sys.getenv(&quot;USER&quot;)==&#39;MACUseR&#39;) {datwd=&quot;&quot;; giswd=&quot;&quot;; reswd=&quot;&quot;} #Change here for Mac/Linux users if (Sys.getenv(&quot;USERNAME&quot;)==&#39;WINDOWSUseR&#39;) {datwd=&quot;&quot;; giswd=&quot;&quot;; reswd=&quot;&quot;} #Change here for Windows users This way a new project member can add a new line of code without deleting anything, and it only sets the working directories (and any other settings you want) for the appropriate user - i.e. the if() statement ignores settings for all other users. If you are running the code from this tutorial you need to set your username and working directories here. You can just set datwd, giswd and reswd to the same file path for the purposes of this tutorial (if you’ve put all the data you downloaded in the same place). 7.2.2.1 A quick aside on slashes Often the reason you can’t read in data is because you need to add (or delete) a “/” at the end! - Silly, but that pro tip should help. Note that we generally use single forwardslashes “/” in R. Windows likes to use single backslashes, but R (and just about every other computer programme in the world) doesn’t like this. You can use double backslashes on Windows if you must… For the sake of simplicity and file size, I have already cropped the elevation and vegetation datasets to a smaller and resampled the raster from 10m to 90m pixel resolution A quick aside on the difference between accuracy and precision! "],["references.html", "References", " References Skowno, Andrew L, Debbie Jewitt, and Jasper A Slingsby. 2021. “Rates and patterns of habitat loss across South Africa’s vegetation biomes.” South African Journal of Science 117 (1/2). https://doi.org/10.17159/sajs.2021/8182. Xie, Yihui. 2015. Dynamic Documents with R and Knitr. 2nd ed. Boca Raton, Florida: Chapman; Hall/CRC. http://yihui.name/knitr/. ———. 2020. Bookdown: Authoring Books and Technical Documents with r Markdown. https://github.com/rstudio/bookdown. "]]
