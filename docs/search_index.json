[["r-as-a-gis.html", "6 R as a GIS 6.1 Overview 6.2 Some key R packages", " 6 R as a GIS 6.1 Overview Points, lines, polygons and rasters - R can handle them all and more! R is a free software environment for statistical computing and graphics, but its abilities have been extended into many realms through the ~18,000 (!) contributed extension packages (also called libraries). The list of packages can be bewildering, but fortunately some great folks have taken the time to sift through and make some sense of them for different focal topics and created Task Views. For GIS there are two Task Views of interest: Spatial - maintained by Roger Bivand and Jakub Nowosad, and SpatioTemporal - maintained by Edzer Pebesma and Roger Bivand They overlap somewhat, but the latter specifically focuses on data where both location and time of observation are registered, and relevant for the analysis of the data. Each has an overview page listing packages and highlighting their respective strengths, weaknesses etc., e.g. Figure 6.1: Screenshot of the “Spatial” Task View at https://cran.r-project.org/ The Spatial Task View focuses on “Analysis of Spatial Data,” with sections on: Classes for spatial data and metadata Reading and writing spatial data Handling spatial data Visualizing spatial data Analyzing spatial data Task Views also allow easy download and installation of all packages in a Task View using library(ctv) - see below. In this case the code you’d need is ctv::install.views(\"Spatial\", coreOnly = TRUE). But beware! If you leave out the coreOnly = TRUE it can take a while to download and install!!! It may take a while even then… You don’t need the whole Task View for my tutorials, so don’t bother downloading it if you’re just working through these. Figure 6.2: Screenshot of the Task View landing page at https://cran.r-project.org/ Since you can’t copy the code from the image, here it is: install.packages(\"ctv\") ctv::install.views(\"Spatial\") 6.2 Some key R packages We don’t have time to go through all packages or provide a full history, but here are some notes in brief. 6.2.1 For vector data (although some of these packages can handle rasters too) The two leading packages were sp and rgdal. While these are still active and useful, they are being superseded by a newer package sf, which is a modern implementation and standardization of parts of sp. It is highly recommended that you use sf over these older packages as they will not be maintained in the long term, largely because they rely on other packages that are no longer maintained because their creators have retired. sf stands for “Simple Features for R,” in compliance with the OGC Simple Feature standard. It is highly efficient, and comes with the advantage that it uses Tidyverse principles and coding styles, e.g. allowing use of the pipe operator (%&gt;%) and the direct application of library(dplyr) data manipulation and library(ggplot2) visualization functions. I will use sf for the most part in the demonstration material. Unfortunately, not all operations are available in sf yet and I may still have to use sp at times, especially when performing operations using both vector and raster data. Here’s a quick list of the functions available in sf: library(sf) methods(class = &#39;sf&#39;) ## [1] [ [[&lt;- $&lt;- ## [4] aggregate anti_join arrange ## [7] as.data.frame cbind coerce ## [10] dbDataType dbWriteTable df_spatial ## [13] distinct dplyr_reconstruct extent ## [16] extract filter full_join ## [19] gather group_by group_split ## [22] identify initialize inner_join ## [25] left_join mask merge ## [28] mutate nest pivot_longer ## [31] plot print raster ## [34] rasterize rbind rename ## [37] right_join rowwise sample_frac ## [40] sample_n select semi_join ## [43] separate_rows separate show ## [46] slice slotsFromS3 spread ## [49] st_agr st_agr&lt;- st_area ## [52] st_as_s2 st_as_sf st_as_sfc ## [55] st_bbox st_boundary st_buffer ## [58] st_cast st_centroid st_collection_extract ## [61] st_convex_hull st_coordinates st_crop ## [64] st_crs st_crs&lt;- st_difference ## [67] st_drop_geometry st_filter st_geometry ## [70] st_geometry&lt;- st_inscribed_circle st_interpolate_aw ## [73] st_intersection st_intersects st_is_valid ## [76] st_is st_join st_line_merge ## [79] st_m_range st_make_valid st_nearest_points ## [82] st_node st_normalize st_point_on_surface ## [85] st_polygonize st_precision st_reverse ## [88] st_sample st_segmentize st_set_precision ## [91] st_shift_longitude st_simplify st_snap ## [94] st_sym_difference st_transform st_triangulate ## [97] st_union st_voronoi st_wrap_dateline ## [100] st_write st_z_range st_zm ## [103] summarise transform transmute ## [106] ungroup unite unnest ## see &#39;?methods&#39; for accessing help and source code This doesn’t tell you how to use them though. To get help with a function in R just type “?” followed by the function name, e.g. ?st_read, and it’ll take you to the help page. Of course, you don’t want to have to read every help page to find the function you want! Fortunately, here’s a “cheat sheet” that allows you to find the function you want relatively quickly (once you’re familiar with the syntax etc): Figure 6.3: An R cheat sheet for library(sf) by Ryan Garnett (page 1). Figure 6.4: An R cheat sheet for library(sf) by Ryan Garnett (page 2). 6.2.2 For raster data By far the best package has been raster, maintained by Robert Hijmans (of WorldClim fame), and can do just about anything with rasters and interfaces with sp very nicely. Unfortunately, both raster and sp are being phased out as explained above. raster is currently being superseded by a new package called terra, also being developed by Hijmans. “terra is very similar to the raster package; but terra is simpler, better, and faster” - Roger Bivand I first developed this module using raster, because terra was still largely in development, so I have kept the demonstrations of raster for those who depend on them for now, but highly recommend you start using terra, because I’ll likely remove the raster material next year. It’s worth noting that raster and terra can handle vector data directly too, and that sometimes their integration with sf is a little clunky, but it does seem to get better all the time. Unfortunately, there’s no cheat sheet for terra or raster, but there’s a lot of documentation and tutorials here. terra is also able to handle spatiotemporal arrays (raster and vector data cubes). Think of these as time-series of GIS data, like satellite archives, etc. Other powerful packages to watch in the spatiotemporal space are stars and gdalcubes. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
